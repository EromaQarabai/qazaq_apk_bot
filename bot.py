import logging
import config
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –õ–æ–≥—Ç–∞—Ä–¥—ã “õ–æ—Å—É
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç—Ç—ã –±–∞—Å—Ç–∞—É
bot = Bot(token=config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# üîπ –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ—Ç—ñ–Ω —Ñ—É–Ω–∫—Ü–∏—è
async def check_subscription(user_id):
    chat_member = await bot.get_chat_member(config.CHANNEL_USERNAME, user_id)
    return chat_member.is_chat_member()

# üîπ "–ñ“Ø–∫—Ç–µ–ø –∞–ª—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å“õ–∞–Ω–¥–∞ —Ç–µ–∫—Å–µ—Ä—É
@dp.callback_query_handler(lambda c: c.data.startswith("download_"))
async def process_download(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    file_id = callback_query.data.split("_")[1]  # –§–∞–π–ª ID (–∫–µ–π—ñ–Ω –±–∞–∑–∞–¥–∞–Ω –∞–ª–∞–º—ã–∑)

    # “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–µ?
    if await check_subscription(user_id):
        await bot.send_message(user_id, f"‚úÖ “ö–æ–ª–¥–∞–Ω–±–∞ –∂“Ø–∫—Ç–µ—É–≥–µ –¥–∞–π—ã–Ω!")
        await bot.send_document(user_id, file_id)
    else:
        btn_subscribe = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¢ –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª—É", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")
        )
        await bot.send_message(user_id, "‚ùå –ê–ª–¥—ã–º–µ–Ω –∞—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑!", reply_markup=btn_subscribe)

# üîπ –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
