import logging
import config
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –õ–æ–≥—Ç–∞—Ä–¥—ã “õ–æ—Å—É
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç—Ç—ã –±–∞—Å—Ç–∞—É
bot = Bot(token=config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# üîπ –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ—Ç—ñ–Ω —Ñ—É–Ω–∫—Ü–∏—è
async def check_subscription(user_id):
    chat_member = await bot.get_chat_member(config.CHANNEL_USERNAME, user_id)
    return chat_member.is_chat_member()

# üîπ "–ñ“Ø–∫—Ç–µ–ø –∞–ª—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å“õ–∞–Ω–¥–∞ —Ç–µ–∫—Å–µ—Ä—É
@dp.callback_query_handler(lambda c: c.data.startswith("download_"))
async def process_download(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    file_id = callback_query.data.split("_")[1]  # –§–∞–π–ª ID (–∫–µ–π—ñ–Ω –±–∞–∑–∞–¥–∞–Ω –∞–ª–∞–º—ã–∑)

    # “ö–æ–ª–¥–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–µ?
    if await check_subscription(user_id):
        await bot.send_message(user_id, f"‚úÖ “ö–æ–ª–¥–∞–Ω–±–∞ –∂“Ø–∫—Ç–µ—É–≥–µ –¥–∞–π—ã–Ω!")
        await bot.send_document(user_id, file_id)
    else:
        btn_subscribe = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¢ –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª—É", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")
        )
        await bot.send_message(user_id, "‚ùå –ê–ª–¥—ã–º–µ–Ω –∞—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑!", reply_markup=btn_subscribe)
from aiogram.types import InputFile
from database import add_file


# üîπ –ê–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ñ–∞–π–ª “õ–æ—Å—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
@dp.message_handler(content_types=types.ContentType.DOCUMENT, user_id=123456789)  # <- ”®–∑ Telegram ID-“£–¥—ñ –∂–∞–∑
async def handle_file(message: types.Message):
    document = message.document
    await message.reply("üì• “ö–æ–ª–¥–∞–Ω–±–∞–Ω—ã“£ –∞—Ç–∞—É—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    
    @dp.message_handler()
    async def get_title(title: types.Message):
        await message.reply("üìù “ö—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
        
        @dp.message_handler()
        async def get_description(description: types.Message):
            await message.reply("üì± “ö–æ–ª–¥–∞–Ω–±–∞ “õ–∞–π –∂“Ø–π–µ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω? (Android/Windows)")

            @dp.message_handler()
            async def get_os(os: types.Message):
                await message.reply("üîì –í–∑–ª–æ–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑: (–í–∑–ª–æ–º, –ü—Ä–µ–º–∏—É–º, –ê“õ—ã–ª—ã)")
                
                @dp.message_handler()
                async def get_feature(feature: types.Message):
                    # –§–∞–π–ª–¥—ã –±–∞–∑–∞“ì–∞ “õ–æ—Å—É
                    add_file(document.file_id, title.text, description.text, os.text, feature.text)
                    
                    # –¢“Ø–π–º–µ –∂–∞—Å–∞—É
                    btn_download = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üì• –ñ“Ø–∫—Ç–µ–ø –∞–ª—É", callback_data=f"download_{document.file_id}")
                    )
                    
                    # –ê—Ä–Ω–∞“ì–∞ –ø–æ—Å—Ç –∂—ñ–±–µ—Ä—É
                    post_text = f"""
<b>{title.text}</b>

üìå {description.text}
üñ• –ñ“Ø–π–µ: {os.text}
üîì –ú“Ø–º–∫—ñ–Ω–¥—ñ–∫: {feature.text}

‚¨á –¢”©–º–µ–Ω–¥–µ–≥—ñ —Ç“Ø–π–º–µ –∞—Ä“õ—ã–ª—ã –∂“Ø–∫—Ç–µ–ø –∞–ª—ã“£—ã–∑:
                    """
                    await bot.send_document(config.CHANNEL_USERNAME, document.file_id, caption=post_text, reply_markup=btn_download)
                    await message.reply("‚úÖ “ö–æ–ª–¥–∞–Ω–±–∞ —Å”ô—Ç—Ç—ñ –∂–∞—Ä–∏—è–ª–∞–Ω–¥—ã!")

from aiogram.types import ChatMemberStatus
import config  # <- –¢—ñ—Ä–∫–µ—É –∫–µ—Ä–µ–∫ –∞—Ä–Ω–∞ ID-—Å—ã config —Ñ–∞–π–ª—ã–Ω–∞ –∂–∞–∑—ã–ª—É—ã –∫–µ—Ä–µ–∫

# üîπ “ö–æ–ª–¥–∞–Ω—É—à—ã –∞—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –±–µ, —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
async def is_subscribed(user_id):
    member = await bot.get_chat_member(config.CHANNEL_USERNAME, user_id)
    return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
from aiogram.types import InputFile
from aiogram.utils.exceptions import ChatNotFound
from database import conn, cursor

# üîπ “ö–æ–ª–¥–∞–Ω—É—à—ã "–ñ“Ø–∫—Ç–µ–ø –∞–ª—É" —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å“õ–∞–Ω–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith("download_"))
async def send_file(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    file_id = callback_query.data.split("_")[1]

    # üîπ –ê—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    if not await is_subscribed(user_id):
        btn_subscribe = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¢ –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª—É", url=f"https://t.me/{config.CHANNEL_USERNAME[1:]}")
        )
        await bot.send_message(user_id, "‚ö† –ñ“Ø–∫—Ç–µ–ø –∞–ª—É “Ø—à—ñ–Ω –∞–ª–¥—ã–º–µ–Ω –∞—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑!", reply_markup=btn_subscribe)
        return

    # üîπ –î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω —Ñ–∞–π–ª–¥—ã –∞–ª—É
    cursor.execute("SELECT file_id, title FROM files WHERE file_id = ?", (file_id,))
    file_data = cursor.fetchone()

    if file_data:
        await bot.send_document(user_id, file_data[0], caption=f"üìÇ {file_data[1]}")
        await callback_query.answer("üì• –§–∞–π–ª –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!", show_alert=True)
    else:
        await callback_query.answer("‚ö† –§–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã!", show_alert=True)

# üîπ –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
